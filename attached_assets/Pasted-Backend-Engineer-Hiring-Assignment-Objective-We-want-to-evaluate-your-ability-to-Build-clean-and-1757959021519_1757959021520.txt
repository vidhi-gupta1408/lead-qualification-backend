Backend Engineer Hiring Assignment
Objective
We want to evaluate your ability to:
Build clean and well-documented backend APIs


Integrate AI models (OpenAI, Gemini, or your choice)


Use product/offer context + prospect data for lead qualification


Deliver a working, testable backend in a short timeframe


You‚Äôll create a backend service that accepts Product/Offer information and a CSV of leads, then scores each lead‚Äôs buying intent (High / Medium / Low) using rule-based logic + AI reasoning.

Tasks
1. Input APIs
POST /offer
 Accept JSON with product/offer details. Example:
{
  "name": "AI Outreach Automation",
  "value_props": ["24/7 outreach", "6x more meetings"],
  "ideal_use_cases": ["B2B SaaS mid-market"]
}

POST /leads/upload
 Accept a CSV file with columns:
name,role,company,industry,location,linkedin_bio


2. Scoring Pipeline
Each lead should be assigned a 0‚Äì100 score and an intent label (High / Medium / Low).
Rule Layer (max 50 points):


Role relevance: decision maker (+20), influencer (+10), else 0


Industry match: exact ICP (+20), adjacent (+10), else 0


Data completeness: all fields present (+10)


AI Layer (max 50 points):


Send prospect + offer details to your chosen AI provider.


Ask the AI:
 ‚ÄúClassify intent (High/Medium/Low) and explain in 1‚Äì2 sentences.‚Äù


Map High = 50, Medium = 30, Low = 10.


Final Score = rule_score + ai_points



3. Output APIs
POST /score
 Run scoring on uploaded leads.
GET /results
 Return JSON array like:
[
  {
    "name": "Ava Patel",
    "role": "Head of Growth",
    "company": "FlowMetrics",
    "intent": "High",
    "score": 85,
    "reasoning": "Fits ICP SaaS mid-market and role is decision maker."
  }
]

(Optional) Add an endpoint to export results as CSV.

Submission Requirements
‚úÖ GitHub Repository
Proper commit history (no single commit dump)


Well-structured code with inline comments & documentation


Include README.md with:


Setup steps


API usage examples (cURL/Postman)


Explanation of rule logic & prompts used


‚úÖ Deployed Backend
Deploy your service (Render, Railway, Vercel, Heroku, or any free tier cloud)


Share the live API base URL in your README for testing

Bonus (Optional, Extra Credit)
Export results as CSV


Add unit tests for the rule layer


Dockerize the service



Evaluation Criteria
Backend Engineering: API design, structure, error handling


AI Integration: effective prompting and context use


Code Quality: commit history, inline documentation, readability


Deployment: working backend accessible via public URL


Documentation: clear README and Loom demo


Bonus: tests, Docker, CSV export



üìå Timebox: Please complete and submit within 24 hours.

